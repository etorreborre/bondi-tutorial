let zero = fun f -> fun x -> x;;

let successor = fun n -> fun f -> fun x -> (n f)(f x);;

let one = successor zero;;
let two = successor one;;
let three = successor two;;

let g = fun x -> x * 2.0;;
let two_power_3 = three g 1.0;;

let add = fun n -> fun m -> fun f -> fun x -> (m f) (n f x);;

(* 2 ^ (2 + 3) *)
let two_power_5 = add two three g 1.0;;
let two_power_five = add three two g 1.0;;

let mult = fun n -> fun m -> fun f -> fun x -> (m n f x);;

(* 2 ^ (2 ^ 3) *)
let two_power_8 = mult two three g 1.0;;
(* 2 ^ (3 ^ 2) *)
let two_power_9 = mult three two g 1.0;;

let inleft = fun x -> fun f -> fun g -> f x;;
let inright = fun x -> fun f -> fun g -> g x;;
let case = fun f -> fun g -> fun z -> z f g;;

let f = fun x -> x + 1.0;;
case f g (inleft 3.0);;
case f g (inright 3.3);;

let rec whileDo b c = 
   if b 
   then (c; whileDo b c)
   else ()
   ;; 

let factorial n =
  let i = Ref n in
    let result = Ref 1 in  
    whileDo (!i > 0) (result = !result * !i; i = !i - 1);
	!result
  ;;
  
  let factorial2 n = 
let x = Ref n in
let res = Ref 1 in 
while (!x > 1) do (
  res = !res * !x; x = !x - 1
	);
!res
;;
 
                    
